import numpy as np
import matplotlib.pyplot as plt

def estimate_coef(x, y):
    """
    Estimate the coefficients for linear regression.
    
    Parameters:
    x (numpy array): Input feature
    y (numpy array): Output variable

    Returns:
    tuple: (b_0, b_1) where b_0 is the y-intercept and b_1 is the slope
    """
    # Number of observations/points
    n = np.size(x)
    
    # Mean of x and y vector
    m_x = np.mean(x)
    m_y = np.mean(y)
    
    # Calculating cross-deviation and deviation about x
    SS_xy = np.sum(y * x) - n * m_y * m_x
    SS_xx = np.sum(x * x) - n * m_x * m_x
    
    # Calculating regression coefficients
    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1 * m_x
    
    return (b_0, b_1)

def plot_regression_line(x, y, b):
    """
    Plot the regression line along with the data points.

    Parameters:
    x (numpy array): Input feature
    y (numpy array): Output variable
    b (tuple): Coefficients (b_0, b_1)
    """
    # Plotting the actual points as a scatter plot
    plt.scatter(x, y, color="r", marker="o", s=30, label="Data points")
    
    # Predicted response vector
    y_pred = b[0] + b[1] * x
    
    # Plotting the regression line
    plt.plot(x, y_pred, color="b", label="Regression line")
    
    # Adding labels and title
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('Linear Regression')
    plt.legend()
    plt.grid(True)
    
    # Show plot
    plt.show()

def main():
    # Observations / data
    x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])
    
    # Estimating coefficients
    b = estimate_coef(x, y)
    print("Estimated coefficients:\nb_0 = {:.2f}\n    b_1 = {:.2f}".format(b[0], b[1]))
    
    # Plotting the regression line
    plot_regression_line(x, y, b)

if __name__ == "__main__":
    main()
